#!/bin/bash

# Script to automate diffing testcases against user and given executables
# Author: Travis Banken

# MUST give name of the given exec and your exec
EXE_GIVEN=
MY_EXE=

# check for executables
if [ "$EXE_GIVEN" == "" ] || [ "$MY_EXE" == "" ]; then
	echo -e "No executables specified. Edit the grader with the names of the executables"
	exit 1
fi

if [ ! -f "./$EXE_GIVEN" ]; then
	echo "The exec '$EXE_GIVEN' not found, is it in current directory?"
	exit 1
fi

if [ ! -f "./$MY_EXE" ]; then
	echo -e "The exec '$MY_EXE' not found, is it in current directory?"
	exit 1
fi

# check if tests are in specified path
if [ "$1" == "" ]; then
	testpath=.
else
	testpath=$1
fi

if [ ! -f "$testpath"/*.in ]; then
	echo "No .in files found for testing :("
	exit 1
fi


RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color


echo "================================================="
echo "SUPER GRADING SCRIPT GOOOOOOOOOO!!!"
echo "------------------------------------"

total=0
passed=0
timedout=0
flag1=0
flag2=0

for TESTCASE in "$testpath"/*.in; do
	echo "Testing $TESTCASE . . . "

	# run run and store outputs and rc of both executables (10 sec timeout)
	# We don't care about stderr so redirect away
	timeout 10 ./$EXE_GIVEN < $TESTCASE > exOut 2>/dev/null
	ex_rc=$(echo $?)
	if [ $ex_rc -eq 124 ]; then
		echo "$EXE_GIVEN timed out! :("
		echo -e "\n"
		timedout=$((timedout + 1))
		continue
	fi
	
	timeout 10 ./$MY_EXE < $TESTCASE > myOut 2>/dev/null
	my_rc=$(echo $?)
	if [ $my_rc -eq 124 ]; then
		echo "$MY_GIVEN timed out! :("
		echo -e "\n"
		timedout=$((timedout + 1))
		continue
	fi

	output=$(diff exOut myOut)

	# check if stdout and rc match on both executables
	echo -n "Output: "
	if [ "$output" == "" ]; then
		echo -e "${GREEN}PASSED${NC}"
		flag1=1
	else
		echo -e "${RED}FAILED${NC}"
		flag1=0
	fi

	echo -n "Return Code: "
	if [ "$ex_rc" == "$my_rc" ]; then
		echo -e "${GREEN}PASSED${NC}"
		flag2=1
	else
		echo -e "${RED}FAILED${NC}"
		flag2=0
	fi

	echo -e "\n"

	# check if output and rc passed
	if [ $((flag1 * flag2)) == 1 ]; then
		passed=$((passed + 1))
	fi
	total=$((total + 1))
	flag="0"

done

score=$((passed * 100 / total))

echo "------------------------------------"
echo "             RESULTS                "
echo "------------------------------------"
echo "Passed: $passed"
echo "Total: $total"
echo -e "\n"
echo -e "\tScore: $score%"
echo -e "\n"
echo "Time Outs: $timedout"
echo "Done."
echo "================================================="
